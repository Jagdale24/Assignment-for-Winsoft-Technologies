Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.
For example,
Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }

ANS-
class Main
{
    private static void merge(int[] X, int[] Y, int m, int n)
    {
        int k = m + n + 1;
        while (m >= 0 && n >= 0)
        {
            if (X[m] > Y[n]) {
                X[k--] = X[m--];
            }
            else {
                X[k--] = Y[n--];
            }
        }
 
        while (n >= 0) {
            X[k--] = Y[n--];
        }
 
        Arrays.fill(Y, 0);
    }
 
    public static void rearrange(int[] X, int[] Y)
    {
        // return if `X` is empty
        if (X.length == 0) {
            return;
        }
 
        int k = 0;
        for (int value: X)
        {
            if (value != 0) {
                X[k++] = value;
            }
        }
 
        merge(X, Y, k - 1, Y.length - 1);
    }
 
    public static void main (String[] args)
    {
        int[] X = { 0, 2, 0, 3, 0, 5, 6, 0, 0};
        int[] Y = { 1, 8, 9, 10, 15 };
        rearrange(X, Y);
        System.out.println(Arrays.toString(X));
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199

ANS->
class Main
{
    public static int findMaxSum(int[] X, int[] Y)
    {
        int sum = 0;
        int sum_x = 0, sum_y = 0;
 
        int m = X.length, n = Y.length;
 
        int i = 0, j = 0;

        while (i < m && j < n)
        {
            while (i < m-1 && X[i] == X[i+1]) {
                sum_x += X[i++];
            }

            while (j < n-1 && Y[j] == Y[j+1]) {
                sum_y += Y[j++];
            }
 
            if (Y[j] < X[i])
            {
                sum_y += Y[j];
                j++;
            }
 
            else if (X[i] < Y[j])
            {
                sum_x += X[i];
                i++;
            }
 
            else    // if (X[i] == Y[j])
            {
                sum += Integer.max(sum_x, sum_y) + X[i];
 
                i++;
                j++;
                sum_x = 0;
                sum_y = 0;
            }
        }

        while (i < m) {
            sum_x += X[i++];
        }
 
        while (j < n) {
            sum_y += Y[j++];
        }
 
        sum += Integer.max(sum_x, sum_y);
        return sum;
    }
 
    public static void main(String[] args)
    {
        int[] X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 };
        int[] Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 };
 
        System.out.println("The maximum sum is " + findMaxSum(X, Y));
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q3:Write a Java Program to count the number of words in a string using HashMap.
Ans->

class HashMap {
    public static void main(String[] args)
    {
 
        String str = "Alice is girl and Bob is boy";
        Map<String, Integer> hashMap = new HashMap<>();

        String[] words = str.split(" ");
 
        for (String word : words) {
            Integer integer = hashMap.get(word);
 
            if (integer == null)
                hashMap.put(word, 1);
 
            else {
                hashMap.put(word, integer + 1);
            }
        }
        System.out.println(hashMap);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q4:Write a Java Program to find the duplicate characters in a string.

public class DuplicateString {
 public static void main(String a[]) {

  String str = "Neeraj Jagdale";
  int cnt = 0;
  char[] inp = str.toCharArray();
  System.out.println("Duplicate Characters are:");
  for (int i = 0; i < str.length(); i++) {
   for (int j = i + 1; j < str.length(); j++) {
    if (inp[i] == inp[j]) {
     System.out.println(inp[j]);
     cnt++;
     break;
    }
   }
  }
 }
}
